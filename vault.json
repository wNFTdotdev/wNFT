{"language": "Vyper", "sources": {"src/interfaces/IManagedVaultToken.vyi": {"content": "@external\ndef mint(to: address, amount: uint256):\n    \"\"\"\n    @dev Mints tokens to the specified address\n    @param to The address that will receive the minted tokens\n    @param amount The amount of tokens to mint\n    \"\"\"\n    ...\n\n@external\ndef burn(from_: address, amount: uint256):\n    \"\"\"\n    @dev Burns tokens from the specified address\n    @param from_ The address from which tokens will be burned\n    @param amount The amount of tokens to burn\n    \"\"\"\n    ...\n\n@external\ndef manager() -> address:\n    \"\"\"\n    @dev Returns the address of the manager that can mint/burn tokens\n    @return The address of the manager\n    \"\"\"\n    ...\n\n@external\ndef change_manager(new_manager: address):\n    \"\"\"\n    @dev Changes the manager address\n    @param new_manager The new manager address\n    \"\"\"\n    ...", "sha256sum": "f91edc68aa4361554a280b6156303112f7afc708e1be36f1786b785014ef8eee"}, "src/RemyVault.vy": {"content": "# pragma version ^0.4.3\n\n################################################################################\n# INTERFACE IMPORTS\n################################################################################\n\nfrom ethereum.ercs import IERC20\nfrom ethereum.ercs import IERC721\nfrom interfaces import IManagedVaultToken\n\n################################################################################\n# STATE VARIABLES\n################################################################################\n\nerc20: public(IERC20)\nerc721: public(IERC721)\nUNIT: constant(uint256) = 10 ** 18\n\n################################################################################\n# EVENTS\n################################################################################\n\nevent Deposit:\n    recipient: indexed(address)\n    token_ids: DynArray[uint256, 100]\n    erc20_amt: uint256\n\nevent Withdraw:\n    recipient: indexed(address)\n    token_ids: DynArray[uint256, 100]\n    erc20_amt: uint256\n\n################################################################################\n# CONSTRUCTOR\n################################################################################\n\n@deploy\ndef __init__(_token_address: address, erc721_address: address):\n    self.erc721 = IERC721(erc721_address)\n    self.erc20 = IERC20(_token_address)\n\n################################################################################\n# DEPOSIT FUNCTION\n################################################################################\n\n@nonreentrant\n@external\ndef deposit(tokenIds: DynArray[uint256, 100], recipient: address = msg.sender) -> uint256:\n    \"\"\"\n    Deposits one or more ERC721 tokens and mints the corresponding amount of ERC20 tokens.\n    Can be used for single or batch deposits.\n    \"\"\"\n    assert len(tokenIds) > 0, \"Must deposit at least one token\"\n    for tokenId: uint256 in tokenIds:\n        extcall self.erc721.transferFrom(msg.sender, self, tokenId)\n    mint_amount: uint256 = self.mint_erc20(recipient, len(tokenIds))\n    log Deposit(recipient=recipient, token_ids=tokenIds, erc20_amt=mint_amount)\n    return mint_amount\n\n################################################################################\n# WITHDRAW FUNCTION\n################################################################################\n\n@nonreentrant\n@external\ndef withdraw(tokenIds: DynArray[uint256, 100], recipient: address = msg.sender) -> uint256:\n    \"\"\"\n    Withdraws one or more ERC721 tokens and burns the corresponding amount of ERC20 tokens.\n    Can be used for single or batch withdrawals.\n    \"\"\"\n    assert len(tokenIds) > 0, \"Must withdraw at least one token\"\n\n    # Calculate token amount\n    total_amount: uint256 = UNIT * len(tokenIds)\n    \n    # Burn tokens first\n    self.burn_erc20(msg.sender, len(tokenIds))\n    \n    # Then transfer the NFTs\n    for tokenId: uint256 in tokenIds:\n        extcall self.erc721.safeTransferFrom(self, recipient, tokenId)\n    \n    log Withdraw(recipient=recipient, token_ids=tokenIds, erc20_amt=total_amount)\n    return total_amount\n\n################################################################################\n# INTERNAL BURN/MINT HELPERS\n################################################################################\n\n@internal\ndef mint_erc20(recipient: address, num_tokens: uint256) -> uint256:\n    erc20_amt: uint256 = num_tokens * UNIT\n    extcall IManagedVaultToken(self.erc20.address).mint(recipient, erc20_amt)\n    return erc20_amt\n\n@internal\ndef burn_erc20(holder: address, num_tokens: uint256):\n    erc20_amt: uint256 = num_tokens * UNIT\n    extcall self.erc20.transferFrom(holder, self, erc20_amt)\n    extcall IManagedVaultToken(self.erc20.address).burn(self, erc20_amt)\n\n################################################################################\n# EXTERNAL QUOTE FUNCTIONS\n################################################################################\n\n@pure\n@external\ndef quoteDeposit(count: uint256) -> uint256:\n    \"\"\"\n    Returns the amount of ERC20 tokens to be minted for a given number of ERC721 tokens.\n    \"\"\"\n    return UNIT * count\n\n@pure\n@external\ndef quoteWithdraw(count: uint256) -> uint256:\n    \"\"\"\n    Returns the amount of ERC20 tokens to be burned for a given number of ERC721 tokens.\n    \"\"\"\n    return UNIT * count\n", "sha256sum": "bd98f8135ac7903b68201f0f3febe39adbd617520580b559a751e47ff3d9df98"}}, "settings": {"outputSelection": {"src/RemyVault.vy": ["*"]}, "search_paths": ["."]}, "compiler_version": "v0.4.3+commit.bff19ea2", "integrity": "53c8ce8d4a515a50b452035e0f4aafc2b962a4ce61635e6306b686dacdd63928"}
