@external
@nonpayable
def mint(tokenId: uint256, recipient: address):
    ...

@external
@nonpayable
def mint_batch(tokenIds: DynArray[uint256, 100], recipient: address, force_fee: bool) -> uint256:
    ...

@external
@nonpayable
def redeem(tokenId: uint256, recipient: address):
    ...

@external
@nonpayable
def redeem_batch(tokenIds: DynArray[uint256, 100], recipient: address, force_fee: bool) -> uint256:
    ...

@external
@nonpayable
def onERC721Received(operator: address, _from: address, tokenId: uint256, data: Bytes[256]) -> bytes4:
    ...

@external
@nonpayable
def transfer_owner(new_owner: address):
    ...

@external
@nonpayable
def set_fees(fees: uint256[2]):
    ...

@external
@nonpayable
def set_active(active: bool):
    ...

@external
@nonpayable
def set_fee_exempt(exempt: address, is_exempt: bool):
    ...

@external
@nonpayable
def set_rbtoken_fee_receiver(receiver: address):
    ...

@view
@external
def erc20() -> address:
    ...

@view
@external
def erc721() -> address:
    ...

@view
@external
def active() -> bool:
    ...

@view
@external
def owner() -> address:
    ...

@view
@external
def mint_fee() -> uint256:
    ...

@view
@external
def redeem_fee() -> uint256:
    ...

@view
@external
def rbtoken_fee_receiver() -> address:
    ...

@view
@external
def fee_exempt(arg0: address) -> bool:
    ...

@view
@external
def quote_redeem(count: uint256, force_fee: bool) -> uint256:
    ...

@view
@external
def quote_mint(count: uint256, force_fee: bool) -> uint256:
    ...

@view
@external
def quote_redeem_fee(recipient: address, num_tokens: uint256) -> uint256:
    ...

@view
@external
def quote_mint_fee(recipient: address, num_tokens: uint256) -> uint256:
    ...

@external
@nonpayable
def charge_fee(amt: uint256):
    ...
